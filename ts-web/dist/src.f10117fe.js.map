{"version":3,"sources":["src/models/User.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACAA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;ADUA,IAAA,IAAA;ACRA,ADQA,ICRM,IAAI,GAAG,IAAI,MAAA,CAAA,IAAJ,CAAS;AAAC,ADQvB,ECRuB,IAAI,EAAE,IDQ7B,ICRsB;AAAiB,ADUrC,ECVqC,GAAG,EAAE,IDU1C,IAAA,CAAoB,IAApB,EAAmC;ACVf,ADUA,CCVT,CAAb,ODUsB,IAAA,GAAA,IAAA;ACRtB,ADOE,ICPE,CAAC,GAAL,CAAS,ADOP,MAAA,GAAwC,EAAxC;ACPQ,ADQ+B,ECR/B,IAAI,EAAC,KAAN;AAAa,EAAA,GAAG,EAAE;AAAlB,ADUP,CCVF,CDUE,IAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,QAAJ,EAAoB;ACRtB,ADSI,ICTA,CAAC,EAAL,CAAQ,GDSG,KCTX,ADSgB,ECTE,EDSP,CAAU,QAAV,CCTO,ADSd;ACRF,ADSC,ECTD,CDOA,MCPO,CAAC,GAAR,CAAY,GAAZ;AACD,CAFD;AAGA,ADSE,EAAA,ECTE,CAAC,CDSH,CCTF,ADSE,CCTM,QAAR,ADSE,CAAA,CCTgB,EDShB,GAAA,OCTgB,GDSZ,MAAJ,EAAqB;ACRrB,ADSE,ECTF,EDSE,KCTK,CAAC,ADSA,CAAC,ECTT,CAAY,GAAZ,ADSE,CAAc,KAAK,IAAnB,EAAyB,MAAzB,EADmB,CAEnB;ACTH,ADUE,CCZH,EDSE,CARF,CAaE;ACXF,IAAI,CAAC,EAAL,CAAQ,MAAR,EAAgB,YAAA;AACd,EAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;AACD,ADUC,CCZF,CDYE,IAAA,CAAA,SAAA,CAAA,EAAA,GAAA,UAAG,SAAH,EAAsB,QAAtB,EAAwC;ACR1C,ADSI,ICTA,CAAC,GDSK,ICTV,CAAa,GDSK,GAAG,ECTrB,GAEA,ADO0B,MAAL,CAAY,SAAZ,KAA0B,EAA3C;ACNJ,ADOI,IAAA,QAAQ,CAAC,IAAT,CAAc,QAAd;AACA,SAAK,MAAL,CAAY,SAAZ,IAAyB,QAAzB;ACNJ,ADOG,GAJD,ICHK,CAAC,GAAR,CAAa,IAAb,EAAmB,IAAnB,GACA;;ADQE,EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,SAAR,EAAyB;AACvB,QAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,CAAjB;;AAEA,QAAG,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,KAAoB,CAApC,EAAuC;AACrC;AACD;;AAED,IAAA,QAAQ,CAAC,OAAT,CAAiB,UAAA,QAAA,EAAQ;AACvB,MAAA,QAAQ;AACT,KAFD;AAGD,GAVD;;AAWF,SAAA,IAAA;AA/BA,CAAA,EAAA;;AAAa,OAAA,CAAA,IAAA,GAAA,IAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["interface UserProps {\r\n  name?: string;\r\n  age?: number;\r\n  //the \"?\" means thar name and age are opcional\r\n}\r\n\r\n//type for a function that takes no argumentes and returns nothing\r\ntype Callback = () => void\r\n\r\n\r\nexport class User {\r\n  events: { [key: string]: Callback[] } = {}\r\n  constructor(private data: UserProps) {}\r\n  \r\n  get(propName: string): number | string {\r\n    return this.data[propName];\r\n  }\r\n\r\n  set(update: UserProps): void {\r\n    Object.assign(this.data, update); \r\n    //this functions overwrites all the content of the fires argument with the second argument\r\n  }\r\n\r\n  // on(eventName: string, callback: () => {}) {\r\n  on(eventName: string, callback: Callback): void {\r\n    const handlers = this.events[eventName] || []\r\n    handlers.push(callback);\r\n    this.events[eventName] = handlers;\r\n  }\r\n\r\n  trigger(eventName: string): void {\r\n    const handlers = this.events[eventName];\r\n\r\n    if(!handlers || handlers.length === 0) {\r\n      return;\r\n    }\r\n\r\n    handlers.forEach(callback => {\r\n      callback()\r\n    })\r\n  }\r\n}","import { User } from './models/User';\r\n\r\nconst user = new User({name: 'myname', age: 20});\r\n\r\nuser.set({name:'new', age: 85})\r\n\r\nuser.on('change', () => {\r\n  console.log('1')\r\n})\r\nuser.on('change', () => {\r\n  console.log('2')\r\n})\r\nuser.on('save', () => {\r\n  console.log('save3')\r\n})\r\n\r\nuser.trigger('saveaa')\r\n\r\n// console.log(user.get('name'))\r\n// console.log(user.get('age'))\r\n\r\nconsole.log( 'hi', user)\r\n// console.log( user)"]}